global !p
def env(name):
  [x,y] = vim.eval('vimtex#env#is_inside("' + str(name) + '")')
  return x != '0' and y != '0'
def text():
  return vim.eval('vimtex#syntax#in_mathzone()') != '1' and not env('lstlisting')
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'
endglobal
#
# Math modes
#
context "text()"
snippet mm "math mode" wA
$$1$$0
endsnippet

context "text()"
snippet dm "display math" wA
\[
	$0
\]
endsnippet
#
# Text modifiers
#
context "text()"
snippet " "quotes" iA
\`\`$1''$0
endsnippet

context "text()"
snippet "(?<=[ ])emph" "emphasis" wrA
\emph{$1}$0
endsnippet

context "text()"
snippet "(?<![\\a-zA-Z])(bf|tt)" "bold font" wrA
\text`!p snip.rv = match.group(1)`{$1}$0
endsnippet

context "text()"
snippet "(?<!\\)(tsu[bp])" "text subscript and superscript" wrA
\\`!p snip.rv = match.group(1)`{$1}$0
endsnippet

context "text()"
snippet "(?<= )([b-zB-HJ-Z]|\\[CFRMNQRZ])([?!.,;\- ])" "single variables" wrA
$`!p snip.rv = match.group(1)`$`!p snip.rv = match.group(2)`$0
endsnippet

context "text()"
snippet " (-?[\d\.]+)([?!,; ])" "digit conversion" wrA
 $`!p snip.rv = match.group(1)`$`!p snip.rv = match.group(2)`$0
endsnippet

context "text()"
snippet "(?<=\d)(st|nd|rd|th)" "ordinal indicators" wrA
\\tsup{`!p snip.rv = match.group(1)`}$0
endsnippet
#
# Math modifiers
#
context "math()"
snippet __ "subscript" iA 
_{$1}$0
endsnippet

context "math()"
snippet ^^ "superscript" iA 
^{$1}$0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet rm "romanized math" iA
\mathrm{$1}$0
endsnippet

context "math()"
snippet bf "bold font math" iA
\mathbf{$1}$0
endsnippet

context "math()"
snippet "m(bb|cal|scr)" "math styles" irA
\\math`!p snip.rv = match.group(1)`{$1}$0
endsnippet

priority 10
context "math()"
snippet / "fraction" iA
\\frac{${VISUAL}}{$1}$0
endsnippet

priority 100
context "math()"
snippet "(([a-zA-Z\d\^\_\\]|\{[^\{\}]+\})+)\/" "simple fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet "^.*\)/" "complex fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
# Basically finds the index of the matching parenthesis to the one before the forward slash
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet "(?<!\\)(binom|[cdt]?frac)" "fractions and binomial coefficients" irA
\\`!p snip.rv = match.group(1)`{$1}{$2}$0
endsnippet

context "math()"
snippet "(?<!\\)sum" "summation" wrA
\sum_{${1:i}=${2:0}}^{${3:\infty}}$0
endsnippet

context "math()"
snippet "(?<![\\oi])((o|i|ii)?int)" "integrals" wrA
\\`!p snip.rv = match.group(1)`_{${1:-\infty}}^{${2:\infty}}${3:f(x)} \dx ${0:x}
endsnippet

context "math()"
snippet ^- "negative exponents" iA
^{-$1}$0
endsnippet

priority 10
context "math()"
snippet "(?<=[a-zA-Z])(?<!mat)(\d)" "single digit subscript" irA
_`!p snip.rv = match.group(1)`$0
endsnippet

priority 10
context "math()"
snippet "([a-zA-Z])_(\d\d)" "two digit subscript" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}$0
endsnippet

context "math()"
snippet "([a-zA-Z]+):" "functions" wrA
`!p snip.rv = match.group(1)`\\colon ${1:\\R}\\to ${2:\\R}$0
endsnippet

context "math()"
snippet "\.(b|c|m)" "dots" irA
\dots`!p snip.rv = match.group(1)`$0
endsnippet

priority 10
context "math()"
snippet "(?<!\\)(Aboxed|abs|bar|(?<![A])boxed|ceil|floor|hat|norm|paren|set|sqrt|tup|vec)" "general math snippets" wrA
\\`!p snip.rv = match.group(1)`{$1}$0
endsnippet

priority 20
context "math()"
snippet "([a-zA-Z]|\\[a-zA-Z]+)(bar|hat|vec)" "postfix snippets" wrA
\\`!p snip.rv = match.group(2)`{`!p snip.rv = match.group(1)`}$0
endsnippet

context "math()"
snippet "(?<!\\)(col|deg|det|dim|(?<![lst])im|ker|rank|(?<![r])row|(?<![a])tr)" "linear algebra snippets" wrA
\\`!p snip.rv = match.group(1)`($1)$0
endsnippet

context "math()"
snippet span "span" wA
\vspan(${1:T})$0
endsnippet

context "math()"
snippet xx "times" iA
\times $0
endsnippet

context "math()"
snippet ** "cdot" iA
\cdot $0
endsnippet

context "math()"
snippet ;a "alpha" iA
\alpha$0
endsnippet

context "math()"
snippet ;b "beta" iA
\beta$0
endsnippet

context "math()"
snippet ;l "lambda" iA
\lam$0
endsnippet

context "math()"
snippet ;o "omega" iA
\omega$0
endsnippet

priority 30
context "math()"
snippet "(i|j)hat" "omega" wrA
\hat{\\`!p snip.rv = match.group(1)`math}$0
endsnippet
#
# Environments
#
context "text()"
snippet sec "section" bA
\section{$1}$0
endsnippet

context "text()"
snippet ssec "subsection" bA
\subsection{$1}$0
endsnippet

context "text()"
snippet sssec "subsubsection" bA
\subsubsection{$1}$0
endsnippet

priority 20
snippet beg "\begin{} ... \end{} (multiline)" bA
\begin{$1}
	$0
\end{$1}
endsnippet

priority 10
context "math()"
snippet beg "\begin{} ... \end{} (inline)" wA
\begin{$1}$0\end{$1}
endsnippet

context "text()"
snippet ali "align environment" bA
\begin{align*}
	$0
\end{align*}
endsnippet

context "text()"
snippet enum "enumerate environment" bA
\begin{enumerate}[label=(\alph*)]
	\item $0
\end{enumerate}
endsnippet

context "text()"
snippet iem "itemize environment" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

context "text()"
snippet pf "proof environment" bA
\begin{proof}
	$0
\end{proof}
endsnippet

context "text()"
snippet pb "problem environment" bA
\begin{problem}{$1}
  $0
\end{problem}
endsnippet

context "text()"
snippet ex "example environment" bA
\begin{example}{$1}
  $0
\end{example}
endsnippet

context "text()"
snippet nt "note environment" bA
\begin{note}{$1}
  $0
\end{note}
endsnippet

context "text()"
snippet defn "definition environment" bA
\begin{definition}{$1}
  $0
\end{definition}
endsnippet

context "text()"
snippet thm "theorem environment" bA
\begin{theorem}{$1}
  $0
\end{theorem}
endsnippet

context "text()"
snippet lem "lemma environment" bA
\begin{lemma}{$1}
  $0
\end{lemma}
endsnippet

context "text()"
snippet code "code environment" bA
\begin{lstlisting}
	$0
\end{lstlisting}
endsnippet
#
# Preambles
#
context "text()"
snippet preamble "main preamble" bA
\documentclass{article}
\input{../../Preamble}

\fancyhf{}
\setlength{\headheight}{24pt}
\lhead{${1:Class Name} \\\\${2:Assignment Name}}
\rhead{Kyle Chui \\\\Page \thepage}
\pagestyle{fancy}
\pagenumbering{gobble}

\title{$2}

\begin{document}
	\maketitle
	\newpage
	\pagenumbering{arabic}
	$0
\end{document}
endsnippet

context "text()"
snippet notes "notes preamble" bA
\documentclass[class=article, crop=false]{standalone}
\input{../../Preamble}

\fancyhf{}
\lhead{Kyle Chui}
\rhead{Page \thepage}
\pagestyle{fancy}

\begin{document}
	$0
\end{document}
endsnippet

context "env('align')"
snippet = "align equals" wA
&=$0
endsnippet

context "env('itemize')"
snippet "  it" "new item" brA
\item $0
endsnippet

context "env('enumerate')"
snippet "  it" "new item" brA
\item $0
endsnippet

global !p
def create_matrix(snip):
	# Take the current line, find the letters preceding 'mat' (if they exist),
	#	and append 'matrix'
	# i.e. bmat --> bmatrix, mat --> matrix, Vmat --> Vmatrix
  matrix_str = (snip.buffer[snip.line].split('mat')[0]+'matrix').strip()
	# Get the characters after the period (in my case they are always the dimensions of the matrix)
  nums = (snip.buffer[snip.line].split('mat', 1)[-1])
	# Store the rows and columns of the matrix
  rows = int(nums[0])
  cols = int(nums[1])
	# Get the indent level of the original text
  old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1] + '\t'
	# Clear the original text
  snip.buffer[snip.line] = ''
	# Initialise the final_str
  final_str = old_spacing + "\\begin{"+matrix_str+"}\n"
  for i in range(rows-1):
		# Indent the elements of the matrix one more than the boundaries
    final_str += old_spacing + '\t'
		# Add the elements of the matrix (with ampersands in between) and newline characters at the end
    final_str += " & ".join(['$' + str(i * cols + j + 1) for j in range(cols)])
    final_str += " \\\\\\\n"
  # Add the final row
  final_str += old_spacing + '\t'
  final_str += " & ".join(['$' + str((rows-1) * cols + j + 1) for j in range(cols)])
  final_str += '\n'
  # End the final_str
  final_str += old_spacing + "\\end{"+matrix_str+"}"
	# Expand the snippet
  snip.expand_anon(final_str)
endglobal

pre_expand "create_matrix(snip)"
context "math()"
snippet "[abBpvV]?mat\d\d" "matrices" brA
endsnippet
